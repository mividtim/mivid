{"version":3,"file":"router.js","sources":["router.coffee"],"names":[],"mappings":"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","sourcesContent":["riot = require \"riot\"\nrouter = require \"riot-route\"\n\nactionTypes = route: \"ROUTE\"\n\nactions =\n  route: (route) -> {\n    type: actionTypes.route\n    route\n  }\n\nreducer = (state = \"home\", action) ->\n  if action.type is actionTypes.route\n    if action.route.length < 1 then \"home\" else action.route\n  else state\n\ntriggerRoute = (tag) ->\n  tag.trigger? \"route\"\n  triggerRoute tag.tags[key] for key of tag.tags\n\n# You have to pass the Redux store into the router on startup\ninit = (bootstrap) ->\n  redux = require \"./redux\"\n  riot.mixin init: ->\n    route = \"\"\n    @on \"mount\", ->\n      state = redux.store.getState()\n      triggerRoute @ if state.route is @root.localName\n      route = state.route\n    @on \"update\", ->\n      state = redux.store.getState()\n      routed = state.route is @root.localName and state.route isnt route\n      route = state.route\n      triggerRoute @ if routed\n  tags = {}\n  # Dispatch a route action to the Redux store whenever the URI hash changes\n  router (route) ->\n    if route.startsWith \"access_token\"\n      token = route.split(\"id_token=\")[1].split(\"&\")[0]\n      localStorage.setItem \"authToken\", token\n      redux.store.dispatch redux.actions.auth.loggedIn token\n      window.location.hash = \"\"\n    else\n      redux.store.dispatch actions.route route\n  # Now that the action is dispatching, subscribe to the store, and re-route on change\n  redux.store.subscribe ->\n    state = redux.store.getState()\n    if not bootstrap? or bootstrap redux.store, redux.actions\n      bootstrap = null\n      # Get the route from the current state in the Redux store\n      route = state.route\n      # Make sure the document is done loading\n      main = document.getElementById \"layoutMain\"\n      # If we haven't shown this card before...\n      if main? and not tags[route]?\n        # Create a new route tag\n        tag = tags[route] = document.createElement \"route\"\n        tag.setAttribute \"tag\", route\n        # Add the route tag to the layout\n        main.appendChild tag\n        riot.mount \"route\"\n  # Now that we're wired up the event to the Redux action, start up the router\n  router.start()\n\nstart = -> router.exec()\n\nmodule.exports = {\n  actions\n  reducer\n  init\n  start\n}\n"]}